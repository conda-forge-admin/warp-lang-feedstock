diff --git a/build_lib.py b/build_lib.py
--- a/build_lib.py
+++ b/build_lib.py
@@ -134,6 +134,8 @@ if os.name == "nt":
         if not args.host_compiler:
             print("Warp build error: Could not find MSVC compiler")
             sys.exit(1)
+else:
+    args.host_compiler = find_host_compiler()


 # return platform specific shared library name
diff --git a/warp/build_dll.py b/warp/build_dll.py
--- a/warp/build_dll.py
+++ b/warp/build_dll.py
@@ -110,7 +110,7 @@ def find_host_compiler():

     else:
         # try and find g++
-        return run_cmd("which g++").decode()
+        return run_cmd("echo $CXX").decode().strip() if run_cmd("echo $CXX") != b"\xA0" else run_cmd("which g++").decode().strip()


 def get_cuda_toolkit_version(cuda_home):
@@ -319,7 +319,7 @@ def build_dll_for_arch(args, dll_path, cpp_paths, cu_path, libs, arch, mode=None
                 cpp_out = cpp_path + ".o"
                 ld_inputs.append(quote(cpp_out))

-                build_cmd = f'g++ {cpp_flags} -c "{cpp_path}" -o "{cpp_out}"'
+                build_cmd = f'{args.host_compiler} {cpp_flags} -c "{cpp_path}" -o "{cpp_out}"'
                 run_cmd(build_cmd)

         if cu_path:
@@ -348,7 +348,7 @@ def build_dll_for_arch(args, dll_path, cpp_paths, cu_path, libs, arch, mode=None

         with ScopedTimer("link", active=args.verbose):
             origin = "@loader_path" if (sys.platform == "darwin") else "$ORIGIN"
-            link_cmd = f"g++ {target} -shared -Wl,-rpath,'{origin}' {opt_no_undefined} {opt_exclude_libs} -o '{dll_path}' {' '.join(ld_inputs + libs)}"
+            link_cmd = f"{args.host_compiler} {target} -shared -Wl,-rpath,'{origin}' {opt_no_undefined} {opt_exclude_libs} -o '{dll_path}' {' '.join(ld_inputs + libs)}"
             run_cmd(link_cmd)

             # Strip symbols to reduce the binary size
